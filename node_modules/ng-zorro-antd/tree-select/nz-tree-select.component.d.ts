/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { CdkConnectedOverlay, CdkOverlayOrigin, ConnectedOverlayPositionChange } from '@angular/cdk/overlay';
import { ChangeDetectorRef, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Subscription } from 'rxjs';
import { NzConfigService, NzFormatEmitEvent, NzNoAnimationDirective, NzSizeLDSType, NzTreeBase, NzTreeBaseService, NzTreeNode, NzTreeNodeOptions } from 'ng-zorro-antd/core';
import { NzTreeComponent } from 'ng-zorro-antd/tree';
import { NzTreeSelectService } from './nz-tree-select.service';
import * as ɵngcc0 from '@angular/core';
export declare function higherOrderServiceFactory(injector: Injector): NzTreeBaseService;
export declare class NzTreeSelectComponent extends NzTreeBase implements ControlValueAccessor, OnInit, OnDestroy, OnChanges {
    nzConfigService: NzConfigService;
    private renderer;
    private cdr;
    private elementRef;
    noAnimation?: NzNoAnimationDirective | undefined;
    nzAllowClear: boolean;
    nzShowExpand: boolean;
    nzShowLine: boolean;
    nzDropdownMatchSelectWidth: boolean;
    nzCheckable: boolean;
    nzHideUnMatched: boolean;
    nzShowIcon: boolean;
    nzShowSearch: boolean;
    nzDisabled: boolean;
    nzAsyncData: boolean;
    nzMultiple: boolean;
    nzDefaultExpandAll: boolean;
    nzCheckStrictly: boolean;
    nzExpandedIcon: TemplateRef<{
        $implicit: NzTreeNode;
    }>;
    nzNotFoundContent: string;
    nzNodes: Array<NzTreeNode | NzTreeNodeOptions>;
    nzOpen: boolean;
    nzSize: NzSizeLDSType;
    nzPlaceHolder: string;
    nzDropdownStyle: {
        [key: string]: string;
    };
    /**
     * @deprecated 9.0.0 - use `nzExpandedKeys` instead.
     */
    nzDefaultExpandedKeys: string[];
    nzExpandedKeys: string[];
    nzDisplayWith: (node: NzTreeNode) => string | undefined;
    nzMaxTagCount: number;
    nzMaxTagPlaceholder: TemplateRef<{
        $implicit: NzTreeNode[];
    }>;
    readonly nzOpenChange: EventEmitter<boolean>;
    readonly nzCleared: EventEmitter<void>;
    readonly nzRemoved: EventEmitter<NzTreeNode>;
    readonly nzExpandChange: EventEmitter<NzFormatEmitEvent>;
    readonly nzTreeClick: EventEmitter<NzFormatEmitEvent>;
    readonly nzTreeCheckBoxChange: EventEmitter<NzFormatEmitEvent>;
    inputElement: ElementRef<HTMLInputElement>;
    treeRef: NzTreeComponent;
    cdkOverlayOrigin: CdkOverlayOrigin;
    cdkConnectedOverlay: CdkConnectedOverlay;
    nzTreeTemplate: TemplateRef<{
        $implicit: NzTreeNode;
    }>;
    nzTreeTemplateChild: TemplateRef<{
        $implicit: NzTreeNode;
    }>;
    readonly treeTemplate: TemplateRef<{
        $implicit: NzTreeNode;
    }>;
    triggerWidth: number;
    isComposing: boolean;
    isDestroy: boolean;
    isNotFound: boolean;
    inputValue: string;
    dropDownPosition: 'top' | 'center' | 'bottom';
    selectionChangeSubscription: Subscription;
    selectedNodes: NzTreeNode[];
    expandedKeys: string[];
    value: string[];
    onChange: (value: string[] | string | null) => void;
    onTouched: () => void;
    readonly placeHolderDisplay: string;
    readonly searchDisplay: string;
    readonly isMultiple: boolean;
    readonly selectedValueDisplay: {
        [key: string]: string;
    };
    constructor(nzTreeService: NzTreeSelectService, nzConfigService: NzConfigService, renderer: Renderer2, cdr: ChangeDetectorRef, elementRef: ElementRef, noAnimation?: NzNoAnimationDirective | undefined);
    ngOnInit(): void;
    ngOnDestroy(): void;
    setDisabledState(isDisabled: boolean): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(value: string[] | string): void;
    registerOnChange(fn: (_: string[] | string | null) => void): void;
    registerOnTouched(fn: () => void): void;
    trigger(): void;
    openDropdown(): void;
    closeDropDown(): void;
    onKeyDownInput(e: KeyboardEvent): void;
    onExpandedKeysChange(value: NzFormatEmitEvent): void;
    setInputValue(value: string): void;
    removeSelected(node: NzTreeNode, emit?: boolean, event?: MouseEvent): void;
    focusOnInput(): void;
    subscribeSelectionChange(): Subscription;
    updateSelectedNodes(init?: boolean): void;
    updatePosition(): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    updateInputWidth(): void;
    onClearSelection($event: MouseEvent): void;
    setSearchValues($event: NzFormatEmitEvent): void;
    updateCdkConnectedOverlayStatus(): void;
    trackValue(_index: number, option: NzTreeNode): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTreeSelectComponent, [null, null, null, null, null, { optional: true; host: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTreeSelectComponent, "nz-tree-select", ["nzTreeSelect"], { "nzAllowClear": "nzAllowClear"; "nzShowExpand": "nzShowExpand"; "nzShowLine": "nzShowLine"; "nzCheckable": "nzCheckable"; "nzShowSearch": "nzShowSearch"; "nzDisabled": "nzDisabled"; "nzAsyncData": "nzAsyncData"; "nzMultiple": "nzMultiple"; "nzDefaultExpandAll": "nzDefaultExpandAll"; "nzCheckStrictly": "nzCheckStrictly"; "nzNodes": "nzNodes"; "nzOpen": "nzOpen"; "nzPlaceHolder": "nzPlaceHolder"; "nzDisplayWith": "nzDisplayWith"; "nzDefaultExpandedKeys": "nzDefaultExpandedKeys"; "nzExpandedKeys": "nzExpandedKeys"; "nzDropdownMatchSelectWidth": "nzDropdownMatchSelectWidth"; "nzHideUnMatched": "nzHideUnMatched"; "nzShowIcon": "nzShowIcon"; "nzExpandedIcon": "nzExpandedIcon"; "nzNotFoundContent": "nzNotFoundContent"; "nzSize": "nzSize"; "nzDropdownStyle": "nzDropdownStyle"; "nzMaxTagCount": "nzMaxTagCount"; "nzMaxTagPlaceholder": "nzMaxTagPlaceholder"; "nzTreeTemplate": "nzTreeTemplate"; }, { "nzOpenChange": "nzOpenChange"; "nzCleared": "nzCleared"; "nzRemoved": "nzRemoved"; "nzExpandChange": "nzExpandChange"; "nzTreeClick": "nzTreeClick"; "nzTreeCheckBoxChange": "nzTreeCheckBoxChange"; }, ["nzTreeTemplateChild"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotdHJlZS1zZWxlY3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm56LXRyZWUtc2VsZWN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBDZGtDb25uZWN0ZWRPdmVybGF5LCBDZGtPdmVybGF5T3JpZ2luLCBDb25uZWN0ZWRPdmVybGF5UG9zaXRpb25DaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbmplY3RvciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE56Q29uZmlnU2VydmljZSwgTnpGb3JtYXRFbWl0RXZlbnQsIE56Tm9BbmltYXRpb25EaXJlY3RpdmUsIE56U2l6ZUxEU1R5cGUsIE56VHJlZUJhc2UsIE56VHJlZUJhc2VTZXJ2aWNlLCBOelRyZWVOb2RlLCBOelRyZWVOb2RlT3B0aW9ucyB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZSc7XG5pbXBvcnQgeyBOelRyZWVDb21wb25lbnQgfSBmcm9tICduZy16b3Jyby1hbnRkL3RyZWUnO1xuaW1wb3J0IHsgTnpUcmVlU2VsZWN0U2VydmljZSB9IGZyb20gJy4vbnotdHJlZS1zZWxlY3Quc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBoaWdoZXJPcmRlclNlcnZpY2VGYWN0b3J5KGluamVjdG9yOiBJbmplY3Rvcik6IE56VHJlZUJhc2VTZXJ2aWNlO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpUcmVlU2VsZWN0Q29tcG9uZW50IGV4dGVuZHMgTnpUcmVlQmFzZSBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcbiAgICBuekNvbmZpZ1NlcnZpY2U6IE56Q29uZmlnU2VydmljZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcbiAgICBub0FuaW1hdGlvbj86IE56Tm9BbmltYXRpb25EaXJlY3RpdmUgfCB1bmRlZmluZWQ7XG4gICAgbnpBbGxvd0NsZWFyOiBib29sZWFuO1xuICAgIG56U2hvd0V4cGFuZDogYm9vbGVhbjtcbiAgICBuelNob3dMaW5lOiBib29sZWFuO1xuICAgIG56RHJvcGRvd25NYXRjaFNlbGVjdFdpZHRoOiBib29sZWFuO1xuICAgIG56Q2hlY2thYmxlOiBib29sZWFuO1xuICAgIG56SGlkZVVuTWF0Y2hlZDogYm9vbGVhbjtcbiAgICBuelNob3dJY29uOiBib29sZWFuO1xuICAgIG56U2hvd1NlYXJjaDogYm9vbGVhbjtcbiAgICBuekRpc2FibGVkOiBib29sZWFuO1xuICAgIG56QXN5bmNEYXRhOiBib29sZWFuO1xuICAgIG56TXVsdGlwbGU6IGJvb2xlYW47XG4gICAgbnpEZWZhdWx0RXhwYW5kQWxsOiBib29sZWFuO1xuICAgIG56Q2hlY2tTdHJpY3RseTogYm9vbGVhbjtcbiAgICBuekV4cGFuZGVkSWNvbjogVGVtcGxhdGVSZWY8e1xuICAgICAgICAkaW1wbGljaXQ6IE56VHJlZU5vZGU7XG4gICAgfT47XG4gICAgbnpOb3RGb3VuZENvbnRlbnQ6IHN0cmluZztcbiAgICBuek5vZGVzOiBBcnJheTxOelRyZWVOb2RlIHwgTnpUcmVlTm9kZU9wdGlvbnM+O1xuICAgIG56T3BlbjogYm9vbGVhbjtcbiAgICBuelNpemU6IE56U2l6ZUxEU1R5cGU7XG4gICAgbnpQbGFjZUhvbGRlcjogc3RyaW5nO1xuICAgIG56RHJvcGRvd25TdHlsZToge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCA5LjAuMCAtIHVzZSBgbnpFeHBhbmRlZEtleXNgIGluc3RlYWQuXG4gICAgICovXG4gICAgbnpEZWZhdWx0RXhwYW5kZWRLZXlzOiBzdHJpbmdbXTtcbiAgICBuekV4cGFuZGVkS2V5czogc3RyaW5nW107XG4gICAgbnpEaXNwbGF5V2l0aDogKG5vZGU6IE56VHJlZU5vZGUpID0+IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBuek1heFRhZ0NvdW50OiBudW1iZXI7XG4gICAgbnpNYXhUYWdQbGFjZWhvbGRlcjogVGVtcGxhdGVSZWY8e1xuICAgICAgICAkaW1wbGljaXQ6IE56VHJlZU5vZGVbXTtcbiAgICB9PjtcbiAgICByZWFkb25seSBuek9wZW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICByZWFkb25seSBuekNsZWFyZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICByZWFkb25seSBuelJlbW92ZWQ6IEV2ZW50RW1pdHRlcjxOelRyZWVOb2RlPjtcbiAgICByZWFkb25seSBuekV4cGFuZENoYW5nZTogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PjtcbiAgICByZWFkb25seSBuelRyZWVDbGljazogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PjtcbiAgICByZWFkb25seSBuelRyZWVDaGVja0JveENoYW5nZTogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PjtcbiAgICBpbnB1dEVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTElucHV0RWxlbWVudD47XG4gICAgdHJlZVJlZjogTnpUcmVlQ29tcG9uZW50O1xuICAgIGNka092ZXJsYXlPcmlnaW46IENka092ZXJsYXlPcmlnaW47XG4gICAgY2RrQ29ubmVjdGVkT3ZlcmxheTogQ2RrQ29ubmVjdGVkT3ZlcmxheTtcbiAgICBuelRyZWVUZW1wbGF0ZTogVGVtcGxhdGVSZWY8e1xuICAgICAgICAkaW1wbGljaXQ6IE56VHJlZU5vZGU7XG4gICAgfT47XG4gICAgbnpUcmVlVGVtcGxhdGVDaGlsZDogVGVtcGxhdGVSZWY8e1xuICAgICAgICAkaW1wbGljaXQ6IE56VHJlZU5vZGU7XG4gICAgfT47XG4gICAgcmVhZG9ubHkgdHJlZVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjx7XG4gICAgICAgICRpbXBsaWNpdDogTnpUcmVlTm9kZTtcbiAgICB9PjtcbiAgICB0cmlnZ2VyV2lkdGg6IG51bWJlcjtcbiAgICBpc0NvbXBvc2luZzogYm9vbGVhbjtcbiAgICBpc0Rlc3Ryb3k6IGJvb2xlYW47XG4gICAgaXNOb3RGb3VuZDogYm9vbGVhbjtcbiAgICBpbnB1dFZhbHVlOiBzdHJpbmc7XG4gICAgZHJvcERvd25Qb3NpdGlvbjogJ3RvcCcgfCAnY2VudGVyJyB8ICdib3R0b20nO1xuICAgIHNlbGVjdGlvbkNoYW5nZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICAgIHNlbGVjdGVkTm9kZXM6IE56VHJlZU5vZGVbXTtcbiAgICBleHBhbmRlZEtleXM6IHN0cmluZ1tdO1xuICAgIHZhbHVlOiBzdHJpbmdbXTtcbiAgICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmdbXSB8IHN0cmluZyB8IG51bGwpID0+IHZvaWQ7XG4gICAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xuICAgIHJlYWRvbmx5IHBsYWNlSG9sZGVyRGlzcGxheTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHNlYXJjaERpc3BsYXk6IHN0cmluZztcbiAgICByZWFkb25seSBpc011bHRpcGxlOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHNlbGVjdGVkVmFsdWVEaXNwbGF5OiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKG56VHJlZVNlcnZpY2U6IE56VHJlZVNlbGVjdFNlcnZpY2UsIG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBub0FuaW1hdGlvbj86IE56Tm9BbmltYXRpb25EaXJlY3RpdmUgfCB1bmRlZmluZWQpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IHN0cmluZ1tdIHwgc3RyaW5nKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogc3RyaW5nW10gfCBzdHJpbmcgfCBudWxsKSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgdHJpZ2dlcigpOiB2b2lkO1xuICAgIG9wZW5Ecm9wZG93bigpOiB2b2lkO1xuICAgIGNsb3NlRHJvcERvd24oKTogdm9pZDtcbiAgICBvbktleURvd25JbnB1dChlOiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBvbkV4cGFuZGVkS2V5c0NoYW5nZSh2YWx1ZTogTnpGb3JtYXRFbWl0RXZlbnQpOiB2b2lkO1xuICAgIHNldElucHV0VmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgcmVtb3ZlU2VsZWN0ZWQobm9kZTogTnpUcmVlTm9kZSwgZW1pdD86IGJvb2xlYW4sIGV2ZW50PzogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgZm9jdXNPbklucHV0KCk6IHZvaWQ7XG4gICAgc3Vic2NyaWJlU2VsZWN0aW9uQ2hhbmdlKCk6IFN1YnNjcmlwdGlvbjtcbiAgICB1cGRhdGVTZWxlY3RlZE5vZGVzKGluaXQ/OiBib29sZWFuKTogdm9pZDtcbiAgICB1cGRhdGVQb3NpdGlvbigpOiB2b2lkO1xuICAgIG9uUG9zaXRpb25DaGFuZ2UocG9zaXRpb246IENvbm5lY3RlZE92ZXJsYXlQb3NpdGlvbkNoYW5nZSk6IHZvaWQ7XG4gICAgdXBkYXRlSW5wdXRXaWR0aCgpOiB2b2lkO1xuICAgIG9uQ2xlYXJTZWxlY3Rpb24oJGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBzZXRTZWFyY2hWYWx1ZXMoJGV2ZW50OiBOekZvcm1hdEVtaXRFdmVudCk6IHZvaWQ7XG4gICAgdXBkYXRlQ2RrQ29ubmVjdGVkT3ZlcmxheVN0YXR1cygpOiB2b2lkO1xuICAgIHRyYWNrVmFsdWUoX2luZGV4OiBudW1iZXIsIG9wdGlvbjogTnpUcmVlTm9kZSk6IHN0cmluZztcbn1cbiJdfQ==