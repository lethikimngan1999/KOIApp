/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { NgStyleInterface, NzConfigService } from 'ng-zorro-antd/core';
import { NzProgressCirclePath, NzProgressFormatter, NzProgressGapPositionType, NzProgressStatusType, NzProgressStrokeColorType, NzProgressStrokeLinecapType, NzProgressTypeType } from './nz-progress.definitions';
import * as ɵngcc0 from '@angular/core';
export declare class NzProgressComponent implements OnChanges, OnInit, OnDestroy {
    nzConfigService: NzConfigService;
    nzShowInfo: boolean;
    nzWidth: number;
    nzStrokeColor: NzProgressStrokeColorType;
    nzSize: 'default' | 'small';
    nzFormat?: NzProgressFormatter;
    nzSuccessPercent?: number;
    nzPercent: number;
    nzStrokeWidth: number;
    nzGapDegree: number;
    nzStatus: NzProgressStatusType;
    nzType: NzProgressTypeType;
    nzGapPosition: NzProgressGapPositionType;
    nzStrokeLinecap: NzProgressStrokeLinecapType;
    /** Gradient style when `nzType` is `line`. */
    lineGradient: string | null;
    /** If user uses gradient color. */
    isGradient: boolean;
    /**
     * Each progress whose `nzType` is circle or dashboard should have unique id to
     * define `<linearGradient>`.
     */
    gradientId: number;
    /** Paths to rendered in the template. */
    progressCirclePath: NzProgressCirclePath[];
    circleGradient: Array<{
        offset: string;
        color: string;
    }>;
    trailPathStyle: NgStyleInterface;
    pathString: string;
    icon: string;
    trackByFn: (index: number) => string;
    readonly formatter: NzProgressFormatter;
    readonly status: NzProgressStatusType;
    readonly strokeWidth: number;
    readonly isCircleStyle: boolean;
    private cachedStatus;
    private inferredStatus;
    private destroy$;
    constructor(nzConfigService: NzConfigService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private updateIcon;
    /**
     * Calculate paths when the type is circle or dashboard.
     */
    private getCirclePaths;
    private setStrokeColor;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzProgressComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzProgressComponent, "nz-progress", ["nzProgress"], { "nzWidth": "nzWidth"; "nzPercent": "nzPercent"; "nzType": "nzType"; "nzShowInfo": "nzShowInfo"; "nzStrokeColor": "nzStrokeColor"; "nzSize": "nzSize"; "nzFormat": "nzFormat"; "nzSuccessPercent": "nzSuccessPercent"; "nzStrokeWidth": "nzStrokeWidth"; "nzGapDegree": "nzGapDegree"; "nzStatus": "nzStatus"; "nzGapPosition": "nzGapPosition"; "nzStrokeLinecap": "nzStrokeLinecap"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotcHJvZ3Jlc3MuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm56LXByb2dyZXNzLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nU3R5bGVJbnRlcmZhY2UsIE56Q29uZmlnU2VydmljZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZSc7XG5pbXBvcnQgeyBOelByb2dyZXNzQ2lyY2xlUGF0aCwgTnpQcm9ncmVzc0Zvcm1hdHRlciwgTnpQcm9ncmVzc0dhcFBvc2l0aW9uVHlwZSwgTnpQcm9ncmVzc1N0YXR1c1R5cGUsIE56UHJvZ3Jlc3NTdHJva2VDb2xvclR5cGUsIE56UHJvZ3Jlc3NTdHJva2VMaW5lY2FwVHlwZSwgTnpQcm9ncmVzc1R5cGVUeXBlIH0gZnJvbSAnLi9uei1wcm9ncmVzcy5kZWZpbml0aW9ucyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOelByb2dyZXNzQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgbnpDb25maWdTZXJ2aWNlOiBOekNvbmZpZ1NlcnZpY2U7XG4gICAgbnpTaG93SW5mbzogYm9vbGVhbjtcbiAgICBueldpZHRoOiBudW1iZXI7XG4gICAgbnpTdHJva2VDb2xvcjogTnpQcm9ncmVzc1N0cm9rZUNvbG9yVHlwZTtcbiAgICBuelNpemU6ICdkZWZhdWx0JyB8ICdzbWFsbCc7XG4gICAgbnpGb3JtYXQ/OiBOelByb2dyZXNzRm9ybWF0dGVyO1xuICAgIG56U3VjY2Vzc1BlcmNlbnQ/OiBudW1iZXI7XG4gICAgbnpQZXJjZW50OiBudW1iZXI7XG4gICAgbnpTdHJva2VXaWR0aDogbnVtYmVyO1xuICAgIG56R2FwRGVncmVlOiBudW1iZXI7XG4gICAgbnpTdGF0dXM6IE56UHJvZ3Jlc3NTdGF0dXNUeXBlO1xuICAgIG56VHlwZTogTnpQcm9ncmVzc1R5cGVUeXBlO1xuICAgIG56R2FwUG9zaXRpb246IE56UHJvZ3Jlc3NHYXBQb3NpdGlvblR5cGU7XG4gICAgbnpTdHJva2VMaW5lY2FwOiBOelByb2dyZXNzU3Ryb2tlTGluZWNhcFR5cGU7XG4gICAgLyoqIEdyYWRpZW50IHN0eWxlIHdoZW4gYG56VHlwZWAgaXMgYGxpbmVgLiAqL1xuICAgIGxpbmVHcmFkaWVudDogc3RyaW5nIHwgbnVsbDtcbiAgICAvKiogSWYgdXNlciB1c2VzIGdyYWRpZW50IGNvbG9yLiAqL1xuICAgIGlzR3JhZGllbnQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRWFjaCBwcm9ncmVzcyB3aG9zZSBgbnpUeXBlYCBpcyBjaXJjbGUgb3IgZGFzaGJvYXJkIHNob3VsZCBoYXZlIHVuaXF1ZSBpZCB0b1xuICAgICAqIGRlZmluZSBgPGxpbmVhckdyYWRpZW50PmAuXG4gICAgICovXG4gICAgZ3JhZGllbnRJZDogbnVtYmVyO1xuICAgIC8qKiBQYXRocyB0byByZW5kZXJlZCBpbiB0aGUgdGVtcGxhdGUuICovXG4gICAgcHJvZ3Jlc3NDaXJjbGVQYXRoOiBOelByb2dyZXNzQ2lyY2xlUGF0aFtdO1xuICAgIGNpcmNsZUdyYWRpZW50OiBBcnJheTx7XG4gICAgICAgIG9mZnNldDogc3RyaW5nO1xuICAgICAgICBjb2xvcjogc3RyaW5nO1xuICAgIH0+O1xuICAgIHRyYWlsUGF0aFN0eWxlOiBOZ1N0eWxlSW50ZXJmYWNlO1xuICAgIHBhdGhTdHJpbmc6IHN0cmluZztcbiAgICBpY29uOiBzdHJpbmc7XG4gICAgdHJhY2tCeUZuOiAoaW5kZXg6IG51bWJlcikgPT4gc3RyaW5nO1xuICAgIHJlYWRvbmx5IGZvcm1hdHRlcjogTnpQcm9ncmVzc0Zvcm1hdHRlcjtcbiAgICByZWFkb25seSBzdGF0dXM6IE56UHJvZ3Jlc3NTdGF0dXNUeXBlO1xuICAgIHJlYWRvbmx5IHN0cm9rZVdpZHRoOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgaXNDaXJjbGVTdHlsZTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGNhY2hlZFN0YXR1cztcbiAgICBwcml2YXRlIGluZmVycmVkU3RhdHVzO1xuICAgIHByaXZhdGUgZGVzdHJveSQ7XG4gICAgY29uc3RydWN0b3IobnpDb25maWdTZXJ2aWNlOiBOekNvbmZpZ1NlcnZpY2UpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIHVwZGF0ZUljb247XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHBhdGhzIHdoZW4gdGhlIHR5cGUgaXMgY2lyY2xlIG9yIGRhc2hib2FyZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIGdldENpcmNsZVBhdGhzO1xuICAgIHByaXZhdGUgc2V0U3Ryb2tlQ29sb3I7XG59XG4iXX0=