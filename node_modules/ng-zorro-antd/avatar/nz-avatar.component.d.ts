/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, Renderer2, SimpleChanges } from '@angular/core';
import { NzConfigService, NzShapeSCType, NzSizeLDSType, NzUpdateHostClassService } from 'ng-zorro-antd/core';
import * as ɵngcc0 from '@angular/core';
export declare class NzAvatarComponent implements OnChanges {
    nzConfigService: NzConfigService;
    private elementRef;
    private cd;
    private updateHostClassService;
    private renderer;
    private platform;
    nzShape: NzShapeSCType;
    nzSize: NzSizeLDSType | number;
    nzText: string;
    nzSrc: string;
    nzSrcSet: string;
    nzAlt: string;
    nzIcon: string;
    readonly nzError: EventEmitter<Event>;
    oldAPIIcon: boolean;
    hasText: boolean;
    hasSrc: boolean;
    hasIcon: boolean;
    textStyles: {};
    textEl: ElementRef;
    private el;
    private prefixCls;
    private sizeMap;
    constructor(nzConfigService: NzConfigService, elementRef: ElementRef, cd: ChangeDetectorRef, updateHostClassService: NzUpdateHostClassService, renderer: Renderer2, platform: Platform);
    setClass(): this;
    imgError($event: Event): void;
    ngOnChanges(changes: SimpleChanges): void;
    private calcStringSize;
    private notifyCalc;
    private setSizeStyle;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzAvatarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzAvatarComponent, "nz-avatar", ["nzAvatar"], { "nzShape": "nzShape"; "nzSize": "nzSize"; "nzText": "nzText"; "nzSrc": "nzSrc"; "nzSrcSet": "nzSrcSet"; "nzAlt": "nzAlt"; "nzIcon": "nzIcon"; }, { "nzError": "nzError"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotYXZhdGFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuei1hdmF0YXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFsaWJhYmEuY29tIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpDb25maWdTZXJ2aWNlLCBOelNoYXBlU0NUeXBlLCBOelNpemVMRFNUeXBlLCBOelVwZGF0ZUhvc3RDbGFzc1NlcnZpY2UgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpBdmF0YXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlO1xuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIGNkO1xuICAgIHByaXZhdGUgdXBkYXRlSG9zdENsYXNzU2VydmljZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgcGxhdGZvcm07XG4gICAgbnpTaGFwZTogTnpTaGFwZVNDVHlwZTtcbiAgICBuelNpemU6IE56U2l6ZUxEU1R5cGUgfCBudW1iZXI7XG4gICAgbnpUZXh0OiBzdHJpbmc7XG4gICAgbnpTcmM6IHN0cmluZztcbiAgICBuelNyY1NldDogc3RyaW5nO1xuICAgIG56QWx0OiBzdHJpbmc7XG4gICAgbnpJY29uOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgbnpFcnJvcjogRXZlbnRFbWl0dGVyPEV2ZW50PjtcbiAgICBvbGRBUElJY29uOiBib29sZWFuO1xuICAgIGhhc1RleHQ6IGJvb2xlYW47XG4gICAgaGFzU3JjOiBib29sZWFuO1xuICAgIGhhc0ljb246IGJvb2xlYW47XG4gICAgdGV4dFN0eWxlczoge307XG4gICAgdGV4dEVsOiBFbGVtZW50UmVmO1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSBwcmVmaXhDbHM7XG4gICAgcHJpdmF0ZSBzaXplTWFwO1xuICAgIGNvbnN0cnVjdG9yKG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHVwZGF0ZUhvc3RDbGFzc1NlcnZpY2U6IE56VXBkYXRlSG9zdENsYXNzU2VydmljZSwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcGxhdGZvcm06IFBsYXRmb3JtKTtcbiAgICBzZXRDbGFzcygpOiB0aGlzO1xuICAgIGltZ0Vycm9yKCRldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHByaXZhdGUgY2FsY1N0cmluZ1NpemU7XG4gICAgcHJpdmF0ZSBub3RpZnlDYWxjO1xuICAgIHByaXZhdGUgc2V0U2l6ZVN0eWxlO1xufVxuIl19