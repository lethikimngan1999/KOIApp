/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, ElementRef, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { NzFormatBeforeDropEvent, NzNoAnimationDirective, NzTreeBaseService, NzTreeNode } from 'ng-zorro-antd/core';
import * as ɵngcc0 from '@angular/core';
export declare class NzTreeNodeComponent implements OnInit, OnChanges, OnDestroy {
    nzTreeService: NzTreeBaseService;
    private ngZone;
    private renderer;
    private elRef;
    private cdr;
    noAnimation?: NzNoAnimationDirective | undefined;
    dragElement: ElementRef;
    /**
     * for global property
     */
    nzTreeNode: NzTreeNode;
    nzShowLine: boolean;
    nzShowExpand: boolean;
    nzCheckable: boolean;
    nzAsyncData: boolean;
    nzHideUnMatched: boolean;
    nzNoAnimation: boolean;
    nzSelectMode: boolean;
    nzShowIcon: boolean;
    nzExpandedIcon: TemplateRef<{
        $implicit: NzTreeNode;
    }>;
    nzTreeTemplate: TemplateRef<{
        $implicit: NzTreeNode;
    }>;
    nzBeforeDrop: (confirm: NzFormatBeforeDropEvent) => Observable<boolean>;
    nzSearchValue: string;
    nzDraggable: boolean;
    /**
     * @deprecated use `nzExpandAll` instead.
     */
    nzDefaultExpandAll: boolean;
    nzExpandAll: boolean;
    prefixCls: string;
    nzNodeClass: {};
    nzNodeSwitcherClass: {};
    nzNodeContentClass: {};
    nzNodeCheckboxClass: {};
    nzNodeContentIconClass: {};
    nzNodeContentLoadingClass: {};
    /**
     * drag var
     */
    destroy$: Subject<unknown>;
    dragPos: number;
    dragPosClass: {
        [key: string]: string;
    };
    /**
     * default set
     */
    _nzDraggable: boolean;
    _nzExpandAll: boolean;
    readonly nzIcon: string;
    readonly canDraggable: boolean | null;
    readonly isShowLineIcon: boolean;
    readonly isShowSwitchIcon: boolean;
    readonly isSwitcherOpen: boolean;
    readonly isSwitcherClose: boolean;
    readonly displayStyle: string;
    /**
     * reset node class
     */
    setClassMap(): void;
    onMousedown(event: MouseEvent): void;
    /**
     * click node to select, 200ms to dbl click
     */
    nzClick(event: MouseEvent): void;
    nzDblClick(event: MouseEvent): void;
    /**
     * @param event
     */
    nzContextMenu(event: MouseEvent): void;
    /**
     * collapse node
     * @param event
     */
    _clickExpand(event: MouseEvent): void;
    private setDisplayForChildNodes;
    private setDisplayForParentNodes;
    /**
     * check node
     * @param event
     */
    _clickCheckBox(event: MouseEvent): void;
    /**
     * drag event
     * @param e
     */
    clearDragClass(): void;
    handleDragStart(e: DragEvent): void;
    handleDragEnter(e: DragEvent): void;
    handleDragOver(e: DragEvent): void;
    handleDragLeave(e: DragEvent): void;
    handleDragDrop(e: DragEvent): void;
    handleDragEnd(e: DragEvent): void;
    /**
     * Listening to dragging events.
     */
    handDragEvent(): void;
    isTemplateRef(value: {}): boolean;
    markForCheck(): void;
    constructor(nzTreeService: NzTreeBaseService, ngZone: NgZone, renderer: Renderer2, elRef: ElementRef, cdr: ChangeDetectorRef, noAnimation?: NzNoAnimationDirective | undefined);
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTreeNodeComponent, [null, null, null, null, null, { optional: true; host: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTreeNodeComponent, "nz-tree-node", ["nzTreeNode"], { "nzHideUnMatched": "nzHideUnMatched"; "nzNoAnimation": "nzNoAnimation"; "nzSelectMode": "nzSelectMode"; "nzShowIcon": "nzShowIcon"; "nzSearchValue": "nzSearchValue"; "nzDraggable": "nzDraggable"; "nzDefaultExpandAll": "nzDefaultExpandAll"; "nzExpandAll": "nzExpandAll"; "nzTreeNode": "nzTreeNode"; "nzShowLine": "nzShowLine"; "nzShowExpand": "nzShowExpand"; "nzCheckable": "nzCheckable"; "nzAsyncData": "nzAsyncData"; "nzExpandedIcon": "nzExpandedIcon"; "nzTreeTemplate": "nzTreeTemplate"; "nzBeforeDrop": "nzBeforeDrop"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotdHJlZS1ub2RlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuei10cmVlLW5vZGUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbGliYWJhLmNvbSBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIE5nWm9uZSwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTnpGb3JtYXRCZWZvcmVEcm9wRXZlbnQsIE56Tm9BbmltYXRpb25EaXJlY3RpdmUsIE56VHJlZUJhc2VTZXJ2aWNlLCBOelRyZWVOb2RlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56VHJlZU5vZGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBuelRyZWVTZXJ2aWNlOiBOelRyZWVCYXNlU2VydmljZTtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgZWxSZWY7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgbm9BbmltYXRpb24/OiBOek5vQW5pbWF0aW9uRGlyZWN0aXZlIHwgdW5kZWZpbmVkO1xuICAgIGRyYWdFbGVtZW50OiBFbGVtZW50UmVmO1xuICAgIC8qKlxuICAgICAqIGZvciBnbG9iYWwgcHJvcGVydHlcbiAgICAgKi9cbiAgICBuelRyZWVOb2RlOiBOelRyZWVOb2RlO1xuICAgIG56U2hvd0xpbmU6IGJvb2xlYW47XG4gICAgbnpTaG93RXhwYW5kOiBib29sZWFuO1xuICAgIG56Q2hlY2thYmxlOiBib29sZWFuO1xuICAgIG56QXN5bmNEYXRhOiBib29sZWFuO1xuICAgIG56SGlkZVVuTWF0Y2hlZDogYm9vbGVhbjtcbiAgICBuek5vQW5pbWF0aW9uOiBib29sZWFuO1xuICAgIG56U2VsZWN0TW9kZTogYm9vbGVhbjtcbiAgICBuelNob3dJY29uOiBib29sZWFuO1xuICAgIG56RXhwYW5kZWRJY29uOiBUZW1wbGF0ZVJlZjx7XG4gICAgICAgICRpbXBsaWNpdDogTnpUcmVlTm9kZTtcbiAgICB9PjtcbiAgICBuelRyZWVUZW1wbGF0ZTogVGVtcGxhdGVSZWY8e1xuICAgICAgICAkaW1wbGljaXQ6IE56VHJlZU5vZGU7XG4gICAgfT47XG4gICAgbnpCZWZvcmVEcm9wOiAoY29uZmlybTogTnpGb3JtYXRCZWZvcmVEcm9wRXZlbnQpID0+IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gICAgbnpTZWFyY2hWYWx1ZTogc3RyaW5nO1xuICAgIG56RHJhZ2dhYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHVzZSBgbnpFeHBhbmRBbGxgIGluc3RlYWQuXG4gICAgICovXG4gICAgbnpEZWZhdWx0RXhwYW5kQWxsOiBib29sZWFuO1xuICAgIG56RXhwYW5kQWxsOiBib29sZWFuO1xuICAgIHByZWZpeENsczogc3RyaW5nO1xuICAgIG56Tm9kZUNsYXNzOiB7fTtcbiAgICBuek5vZGVTd2l0Y2hlckNsYXNzOiB7fTtcbiAgICBuek5vZGVDb250ZW50Q2xhc3M6IHt9O1xuICAgIG56Tm9kZUNoZWNrYm94Q2xhc3M6IHt9O1xuICAgIG56Tm9kZUNvbnRlbnRJY29uQ2xhc3M6IHt9O1xuICAgIG56Tm9kZUNvbnRlbnRMb2FkaW5nQ2xhc3M6IHt9O1xuICAgIC8qKlxuICAgICAqIGRyYWcgdmFyXG4gICAgICovXG4gICAgZGVzdHJveSQ6IFN1YmplY3Q8dW5rbm93bj47XG4gICAgZHJhZ1BvczogbnVtYmVyO1xuICAgIGRyYWdQb3NDbGFzczoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBkZWZhdWx0IHNldFxuICAgICAqL1xuICAgIF9uekRyYWdnYWJsZTogYm9vbGVhbjtcbiAgICBfbnpFeHBhbmRBbGw6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgbnpJY29uOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgY2FuRHJhZ2dhYmxlOiBib29sZWFuIHwgbnVsbDtcbiAgICByZWFkb25seSBpc1Nob3dMaW5lSWNvbjogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc1Nob3dTd2l0Y2hJY29uOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzU3dpdGNoZXJPcGVuOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzU3dpdGNoZXJDbG9zZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBkaXNwbGF5U3R5bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiByZXNldCBub2RlIGNsYXNzXG4gICAgICovXG4gICAgc2V0Q2xhc3NNYXAoKTogdm9pZDtcbiAgICBvbk1vdXNlZG93bihldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogY2xpY2sgbm9kZSB0byBzZWxlY3QsIDIwMG1zIHRvIGRibCBjbGlja1xuICAgICAqL1xuICAgIG56Q2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIG56RGJsQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBldmVudFxuICAgICAqL1xuICAgIG56Q29udGV4dE1lbnUoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIGNvbGxhcHNlIG5vZGVcbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBfY2xpY2tFeHBhbmQoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIHByaXZhdGUgc2V0RGlzcGxheUZvckNoaWxkTm9kZXM7XG4gICAgcHJpdmF0ZSBzZXREaXNwbGF5Rm9yUGFyZW50Tm9kZXM7XG4gICAgLyoqXG4gICAgICogY2hlY2sgbm9kZVxuICAgICAqIEBwYXJhbSBldmVudFxuICAgICAqL1xuICAgIF9jbGlja0NoZWNrQm94KGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBkcmFnIGV2ZW50XG4gICAgICogQHBhcmFtIGVcbiAgICAgKi9cbiAgICBjbGVhckRyYWdDbGFzcygpOiB2b2lkO1xuICAgIGhhbmRsZURyYWdTdGFydChlOiBEcmFnRXZlbnQpOiB2b2lkO1xuICAgIGhhbmRsZURyYWdFbnRlcihlOiBEcmFnRXZlbnQpOiB2b2lkO1xuICAgIGhhbmRsZURyYWdPdmVyKGU6IERyYWdFdmVudCk6IHZvaWQ7XG4gICAgaGFuZGxlRHJhZ0xlYXZlKGU6IERyYWdFdmVudCk6IHZvaWQ7XG4gICAgaGFuZGxlRHJhZ0Ryb3AoZTogRHJhZ0V2ZW50KTogdm9pZDtcbiAgICBoYW5kbGVEcmFnRW5kKGU6IERyYWdFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTGlzdGVuaW5nIHRvIGRyYWdnaW5nIGV2ZW50cy5cbiAgICAgKi9cbiAgICBoYW5kRHJhZ0V2ZW50KCk6IHZvaWQ7XG4gICAgaXNUZW1wbGF0ZVJlZih2YWx1ZToge30pOiBib29sZWFuO1xuICAgIG1hcmtGb3JDaGVjaygpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKG56VHJlZVNlcnZpY2U6IE56VHJlZUJhc2VTZXJ2aWNlLCBuZ1pvbmU6IE5nWm9uZSwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgZWxSZWY6IEVsZW1lbnRSZWYsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIG5vQW5pbWF0aW9uPzogTnpOb0FuaW1hdGlvbkRpcmVjdGl2ZSB8IHVuZGVmaW5lZCk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=