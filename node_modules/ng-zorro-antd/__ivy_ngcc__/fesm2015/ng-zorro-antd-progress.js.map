{"version":3,"file":"ng-zorro-antd-progress.js","sources":["ng:/ng-zorro-antd/progress/nz-progress-utils.ts","ng:/ng-zorro-antd/progress/nz-progress.component.ts","ng:/ng-zorro-antd/progress/nz-progress.module.ts","ng:/ng-zorro-antd/progress/nz-progress.definitions.ts"],"names":["tslib_1.__decorate"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NzProgressColorGradient, NzProgressGradientProgress } from './nz-progress.definitions';\n\nfunction stripPercentToNumber(percent: string): number {\n  return +percent.replace('%', '');\n}\n\nexport const sortGradient = (gradients: NzProgressGradientProgress) => {\n  let tempArr: Array<{ key: number; value: string }> = [];\n\n  Object.keys(gradients).forEach(key => {\n    const value = gradients[key];\n    const formatKey = stripPercentToNumber(key);\n    if (isNaN(formatKey)) {\n      return {};\n    }\n    tempArr.push({\n      key: formatKey,\n      value\n    });\n  });\n\n  tempArr = tempArr.sort((a, b) => a.key - b.key);\n  return tempArr;\n};\n\nexport const handleCircleGradient = (\n  strokeColor: NzProgressGradientProgress\n): Array<{ offset: string; color: string }> => {\n  return sortGradient(strokeColor).map(({ key, value }) => ({ offset: `${key}%`, color: value }));\n};\n\nexport const handleLinearGradient = (strokeColor: NzProgressColorGradient) => {\n  const { from = '#1890ff', to = '#1890ff', direction = 'to right', ...rest } = strokeColor;\n  if (Object.keys(rest).length !== 0) {\n    const sortedGradients = sortGradient(rest as NzProgressGradientProgress)\n      .map(({ key, value }) => `${value} ${key}%`)\n      .join(', ');\n    return `linear-gradient(${direction}, ${sortedGradients})`;\n  }\n  return `linear-gradient(${direction}, ${from}, ${to})`;\n};\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { isNotNil, InputNumber, NgStyleInterface, NzConfigService, WithConfig } from 'ng-zorro-antd/core';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { handleCircleGradient, handleLinearGradient } from './nz-progress-utils';\nimport {\n  NzProgressCirclePath,\n  NzProgressColorGradient,\n  NzProgressFormatter,\n  NzProgressGapPositionType,\n  NzProgressGradientProgress,\n  NzProgressStatusType,\n  NzProgressStrokeColorType,\n  NzProgressStrokeLinecapType,\n  NzProgressTypeType\n} from './nz-progress.definitions';\n\nlet gradientIdSeed = 0;\n\nconst NZ_CONFIG_COMPONENT_NAME = 'progress';\nconst statusIconNameMap = new Map([['success', 'check'], ['exception', 'close']]);\nconst statusColorMap = new Map([['normal', '#108ee9'], ['exception', '#ff5500'], ['success', '#87d068']]);\nconst defaultFormatter: NzProgressFormatter = (p: number): string => `${p}%`;\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'nz-progress',\n  exportAs: 'nzProgress',\n  preserveWhitespaces: false,\n  templateUrl: './nz-progress.component.html'\n})\nexport class NzProgressComponent implements OnChanges, OnInit, OnDestroy {\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, true) nzShowInfo: boolean;\n  @Input() nzWidth = 132;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME) nzStrokeColor: NzProgressStrokeColorType;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, 'default') nzSize: 'default' | 'small';\n  @Input() nzFormat?: NzProgressFormatter;\n  @Input() @InputNumber() nzSuccessPercent?: number;\n  @Input() @InputNumber() nzPercent: number = 0;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME) @InputNumber() nzStrokeWidth: number;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME) @InputNumber() nzGapDegree: number;\n  @Input() nzStatus: NzProgressStatusType;\n  @Input() nzType: NzProgressTypeType = 'line';\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, 'top') nzGapPosition: NzProgressGapPositionType;\n  @Input() @WithConfig(NZ_CONFIG_COMPONENT_NAME, 'round') nzStrokeLinecap: NzProgressStrokeLinecapType;\n\n  /** Gradient style when `nzType` is `line`. */\n  lineGradient: string | null = null;\n\n  /** If user uses gradient color. */\n  isGradient = false;\n\n  /**\n   * Each progress whose `nzType` is circle or dashboard should have unique id to\n   * define `<linearGradient>`.\n   */\n  gradientId = gradientIdSeed++;\n\n  /** Paths to rendered in the template. */\n  progressCirclePath: NzProgressCirclePath[] = [];\n\n  circleGradient: Array<{ offset: string; color: string }>;\n\n  trailPathStyle: NgStyleInterface;\n\n  pathString: string;\n\n  icon: string;\n\n  trackByFn = (index: number) => `${index}`;\n\n  get formatter(): NzProgressFormatter {\n    return this.nzFormat || defaultFormatter;\n  }\n\n  get status(): NzProgressStatusType {\n    return this.nzStatus || this.inferredStatus;\n  }\n\n  get strokeWidth(): number {\n    return this.nzStrokeWidth || (this.nzType === 'line' && this.nzSize !== 'small' ? 8 : 6);\n  }\n\n  get isCircleStyle(): boolean {\n    return this.nzType === 'circle' || this.nzType === 'dashboard';\n  }\n\n  private cachedStatus: NzProgressStatusType = 'normal';\n  private inferredStatus: NzProgressStatusType = 'normal';\n  private destroy$ = new Subject<void>();\n\n  constructor(public nzConfigService: NzConfigService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const {\n      nzGapPosition,\n      nzStrokeLinecap,\n      nzStrokeColor,\n      nzGapDegree,\n      nzType,\n      nzStatus,\n      nzPercent,\n      nzSuccessPercent\n    } = changes;\n\n    if (nzStatus) {\n      this.cachedStatus = this.nzStatus || this.cachedStatus;\n    }\n\n    if (nzPercent || nzSuccessPercent) {\n      const fillAll = parseInt(this.nzPercent.toString(), 10) >= 100;\n      if (fillAll) {\n        if ((isNotNil(this.nzSuccessPercent) && this.nzSuccessPercent! >= 100) || this.nzSuccessPercent === undefined) {\n          this.inferredStatus = 'success';\n        }\n      } else {\n        this.inferredStatus = this.cachedStatus;\n      }\n    }\n\n    if (nzStatus || nzPercent || nzSuccessPercent) {\n      this.updateIcon();\n    }\n\n    if (nzStrokeColor) {\n      this.setStrokeColor();\n    }\n\n    if (nzGapPosition || nzStrokeLinecap || nzGapDegree || nzType || nzPercent || nzStrokeColor) {\n      this.getCirclePaths();\n    }\n  }\n\n  ngOnInit(): void {\n    this.nzConfigService\n      .getConfigChangeEventForComponent(NZ_CONFIG_COMPONENT_NAME)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateIcon();\n        this.setStrokeColor();\n        this.getCirclePaths();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private updateIcon(): void {\n    const ret = statusIconNameMap.get(this.status);\n    this.icon = ret ? ret + (this.isCircleStyle ? '-o' : '-circle-fill') : '';\n  }\n\n  /**\n   * Calculate paths when the type is circle or dashboard.\n   */\n  private getCirclePaths(): void {\n    if (!this.isCircleStyle) {\n      return;\n    }\n\n    const values = isNotNil(this.nzSuccessPercent) ? [this.nzSuccessPercent!, this.nzPercent] : [this.nzPercent];\n\n    // Calculate shared styles.\n    const radius = 50 - this.strokeWidth / 2;\n    const gapPosition = this.nzGapPosition || (this.nzType === 'circle' ? 'top' : 'bottom');\n    const len = Math.PI * 2 * radius;\n    const gapDegree = this.nzGapDegree || (this.nzType === 'circle' ? 0 : 75);\n\n    let beginPositionX = 0;\n    let beginPositionY = -radius;\n    let endPositionX = 0;\n    let endPositionY = radius * -2;\n\n    switch (gapPosition) {\n      case 'left':\n        beginPositionX = -radius;\n        beginPositionY = 0;\n        endPositionX = radius * 2;\n        endPositionY = 0;\n        break;\n      case 'right':\n        beginPositionX = radius;\n        beginPositionY = 0;\n        endPositionX = radius * -2;\n        endPositionY = 0;\n        break;\n      case 'bottom':\n        beginPositionY = radius;\n        endPositionY = radius * 2;\n        break;\n      default:\n    }\n\n    this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n\n    this.trailPathStyle = {\n      strokeDasharray: `${len - gapDegree}px ${len}px`,\n      strokeDashoffset: `-${gapDegree / 2}px`,\n      transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n    };\n\n    // Calculate styles for each path.\n    this.progressCirclePath = values\n      .map((value, index) => {\n        const isSuccessPercent = values.length === 2 && index === 0;\n        return {\n          stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\n          strokePathStyle: {\n            stroke: !this.isGradient\n              ? isSuccessPercent\n                ? statusColorMap.get('success')\n                : (this.nzStrokeColor as string)\n              : null,\n            transition:\n              'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\n            strokeDasharray: `${((value || 0) / 100) * (len - gapDegree)}px ${len}px`,\n            strokeDashoffset: `-${gapDegree / 2}px`\n          }\n        };\n      })\n      .reverse();\n  }\n\n  private setStrokeColor(): void {\n    const color = this.nzStrokeColor;\n    const isGradient = (this.isGradient = !!color && typeof color !== 'string');\n    if (isGradient && !this.isCircleStyle) {\n      this.lineGradient = handleLinearGradient(color as NzProgressColorGradient);\n    } else if (isGradient && this.isCircleStyle) {\n      this.circleGradient = handleCircleGradient(this.nzStrokeColor as NzProgressGradientProgress);\n    } else {\n      this.lineGradient = null;\n      this.circleGradient = [];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\n\nimport { NzProgressComponent } from './nz-progress.component';\n\n@NgModule({\n  exports: [NzProgressComponent],\n  declarations: [NzProgressComponent],\n  imports: [CommonModule, NzIconModule]\n})\nexport class NzProgressModule {}\n","/**\n * @license\n * Copyright Alibaba.com All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NgStyleInterface } from 'ng-zorro-antd/core';\n\nexport type NzProgressGapPositionType = 'top' | 'bottom' | 'left' | 'right';\n\nexport type NzProgressStatusType = 'success' | 'exception' | 'active' | 'normal';\n\nexport type NzProgressTypeType = 'line' | 'circle' | 'dashboard';\n\nexport type NzProgressStrokeLinecapType = 'round' | 'square';\n\nexport interface NzProgressGradientProgress {\n  [percent: string]: string;\n}\n\nexport interface NzProgressGradientFromTo {\n  from: string;\n  to: string;\n}\n\nexport type NzProgressColorGradient = { direction?: string } & (NzProgressGradientProgress | NzProgressGradientFromTo);\n\nexport type NzProgressStrokeColorType = string | NzProgressColorGradient;\n\nexport type NzProgressFormatter = (percent: number) => string;\n\nexport interface NzProgressCirclePath {\n  stroke: string | null;\n  strokePathStyle: NgStyleInterface;\n}\n"]}