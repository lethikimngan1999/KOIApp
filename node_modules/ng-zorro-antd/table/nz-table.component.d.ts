/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Platform } from '@angular/cdk/platform';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges, TemplateRef, TrackByFunction } from '@angular/core';
import { NzConfigService, NzSizeMDSType } from 'ng-zorro-antd/core';
import { NzI18nService } from 'ng-zorro-antd/i18n';
import { PaginationItemRenderContext } from 'ng-zorro-antd/pagination';
import { NzThComponent } from './nz-th.component';
import { NzTheadComponent } from './nz-thead.component';
import { NzVirtualScrollDirective } from './nz-virtual-scroll.directive';
import * as ɵngcc0 from '@angular/core';
export declare class NzTableComponent<T = any> implements OnInit, AfterViewInit, OnDestroy, OnChanges, AfterContentInit {
    nzConfigService: NzConfigService;
    private renderer;
    private ngZone;
    private cdr;
    private i18n;
    private platform;
    /** public data for ngFor tr */
    data: T[];
    locale: any;
    nzTheadComponent: NzTheadComponent;
    lastScrollLeft: number;
    headerBottomStyle: {};
    private destroy$;
    listOfNzThComponent: QueryList<NzThComponent>;
    tableHeaderElement: ElementRef;
    tableBodyElement: ElementRef;
    tableMainElement: ElementRef;
    cdkVirtualScrollElement: ElementRef;
    cdkVirtualScrollViewport: CdkVirtualScrollViewport;
    nzVirtualScrollDirective: NzVirtualScrollDirective;
    nzSize: NzSizeMDSType;
    nzShowTotal: TemplateRef<{
        $implicit: number;
        range: [number, number];
    }>;
    nzPageSizeOptions: number[];
    nzVirtualScroll: boolean;
    nzVirtualItemSize: number;
    nzVirtualMaxBufferPx: number;
    nzVirtualMinBufferPx: number;
    nzVirtualForTrackBy: TrackByFunction<T> | undefined;
    nzLoadingDelay: number;
    nzLoadingIndicator: TemplateRef<void>;
    nzTotal: number;
    nzTitle: string | TemplateRef<void>;
    nzFooter: string | TemplateRef<void>;
    nzNoResult: string | TemplateRef<void>;
    nzWidthConfig: string[];
    nzPageIndex: number;
    nzPageSize: number;
    nzData: T[];
    nzPaginationPosition: 'top' | 'bottom' | 'both';
    nzScroll: {
        x?: string | null;
        y?: string | null;
    };
    nzItemRender: TemplateRef<PaginationItemRenderContext>;
    itemRenderChild: TemplateRef<PaginationItemRenderContext>;
    readonly itemRender: TemplateRef<PaginationItemRenderContext>;
    nzFrontPagination: boolean;
    nzTemplateMode: boolean;
    nzBordered: boolean;
    nzShowPagination: boolean;
    nzLoading: boolean;
    nzShowSizeChanger: boolean;
    nzHideOnSinglePage: boolean;
    nzShowQuickJumper: boolean;
    nzSimple: boolean;
    readonly nzPageSizeChange: EventEmitter<number>;
    readonly nzPageIndexChange: EventEmitter<number>;
    readonly nzCurrentPageDataChange: EventEmitter<any[]>;
    readonly tableBodyNativeElement: HTMLElement;
    readonly tableHeaderNativeElement: HTMLElement;
    readonly cdkVirtualScrollNativeElement: HTMLElement;
    readonly mixTableBodyNativeElement: HTMLElement;
    emitPageSizeOrIndex(size: number, index: number): void;
    syncScrollTable(e: MouseEvent): void;
    setScrollPositionClassName(): void;
    setScrollName(position?: string): void;
    fitScrollBar(): void;
    updateFrontPaginationDataIfNeeded(isPageSizeOrDataChange?: boolean): void;
    constructor(nzConfigService: NzConfigService, renderer: Renderer2, ngZone: NgZone, cdr: ChangeDetectorRef, i18n: NzI18nService, platform: Platform, elementRef: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTableComponent<any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTableComponent<any>, "nz-table", ["nzTable"], { "nzPageSizeOptions": "nzPageSizeOptions"; "nzVirtualScroll": "nzVirtualScroll"; "nzVirtualItemSize": "nzVirtualItemSize"; "nzVirtualMaxBufferPx": "nzVirtualMaxBufferPx"; "nzVirtualMinBufferPx": "nzVirtualMinBufferPx"; "nzLoadingDelay": "nzLoadingDelay"; "nzTotal": "nzTotal"; "nzWidthConfig": "nzWidthConfig"; "nzPageIndex": "nzPageIndex"; "nzPageSize": "nzPageSize"; "nzData": "nzData"; "nzPaginationPosition": "nzPaginationPosition"; "nzScroll": "nzScroll"; "nzFrontPagination": "nzFrontPagination"; "nzTemplateMode": "nzTemplateMode"; "nzShowPagination": "nzShowPagination"; "nzLoading": "nzLoading"; "nzSize": "nzSize"; "nzShowTotal": "nzShowTotal"; "nzVirtualForTrackBy": "nzVirtualForTrackBy"; "nzLoadingIndicator": "nzLoadingIndicator"; "nzTitle": "nzTitle"; "nzFooter": "nzFooter"; "nzNoResult": "nzNoResult"; "nzItemRender": "nzItemRender"; "nzBordered": "nzBordered"; "nzShowSizeChanger": "nzShowSizeChanger"; "nzHideOnSinglePage": "nzHideOnSinglePage"; "nzShowQuickJumper": "nzShowQuickJumper"; "nzSimple": "nzSimple"; }, { "nzPageSizeChange": "nzPageSizeChange"; "nzPageIndexChange": "nzPageIndexChange"; "nzCurrentPageDataChange": "nzCurrentPageDataChange"; }, ["nzVirtualScrollDirective", "listOfNzThComponent"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnotdGFibGUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm56LXRhYmxlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWxpYmFiYS5jb20gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcbmltcG9ydCB7IENka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zY3JvbGxpbmcnO1xuaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBRdWVyeUxpc3QsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFRyYWNrQnlGdW5jdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTnpDb25maWdTZXJ2aWNlLCBOelNpemVNRFNUeXBlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlJztcbmltcG9ydCB7IE56STE4blNlcnZpY2UgfSBmcm9tICduZy16b3Jyby1hbnRkL2kxOG4nO1xuaW1wb3J0IHsgUGFnaW5hdGlvbkl0ZW1SZW5kZXJDb250ZXh0IH0gZnJvbSAnbmctem9ycm8tYW50ZC9wYWdpbmF0aW9uJztcbmltcG9ydCB7IE56VGhDb21wb25lbnQgfSBmcm9tICcuL256LXRoLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOelRoZWFkQ29tcG9uZW50IH0gZnJvbSAnLi9uei10aGVhZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpWaXJ0dWFsU2Nyb2xsRGlyZWN0aXZlIH0gZnJvbSAnLi9uei12aXJ0dWFsLXNjcm9sbC5kaXJlY3RpdmUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpUYWJsZUNvbXBvbmVudDxUID0gYW55PiBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQge1xuICAgIG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgcHJpdmF0ZSBpMThuO1xuICAgIHByaXZhdGUgcGxhdGZvcm07XG4gICAgLyoqIHB1YmxpYyBkYXRhIGZvciBuZ0ZvciB0ciAqL1xuICAgIGRhdGE6IFRbXTtcbiAgICBsb2NhbGU6IGFueTtcbiAgICBuelRoZWFkQ29tcG9uZW50OiBOelRoZWFkQ29tcG9uZW50O1xuICAgIGxhc3RTY3JvbGxMZWZ0OiBudW1iZXI7XG4gICAgaGVhZGVyQm90dG9tU3R5bGU6IHt9O1xuICAgIHByaXZhdGUgZGVzdHJveSQ7XG4gICAgbGlzdE9mTnpUaENvbXBvbmVudDogUXVlcnlMaXN0PE56VGhDb21wb25lbnQ+O1xuICAgIHRhYmxlSGVhZGVyRWxlbWVudDogRWxlbWVudFJlZjtcbiAgICB0YWJsZUJvZHlFbGVtZW50OiBFbGVtZW50UmVmO1xuICAgIHRhYmxlTWFpbkVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgY2RrVmlydHVhbFNjcm9sbEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgY2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0OiBDZGtWaXJ0dWFsU2Nyb2xsVmlld3BvcnQ7XG4gICAgbnpWaXJ0dWFsU2Nyb2xsRGlyZWN0aXZlOiBOelZpcnR1YWxTY3JvbGxEaXJlY3RpdmU7XG4gICAgbnpTaXplOiBOelNpemVNRFNUeXBlO1xuICAgIG56U2hvd1RvdGFsOiBUZW1wbGF0ZVJlZjx7XG4gICAgICAgICRpbXBsaWNpdDogbnVtYmVyO1xuICAgICAgICByYW5nZTogW251bWJlciwgbnVtYmVyXTtcbiAgICB9PjtcbiAgICBuelBhZ2VTaXplT3B0aW9uczogbnVtYmVyW107XG4gICAgbnpWaXJ0dWFsU2Nyb2xsOiBib29sZWFuO1xuICAgIG56VmlydHVhbEl0ZW1TaXplOiBudW1iZXI7XG4gICAgbnpWaXJ0dWFsTWF4QnVmZmVyUHg6IG51bWJlcjtcbiAgICBuelZpcnR1YWxNaW5CdWZmZXJQeDogbnVtYmVyO1xuICAgIG56VmlydHVhbEZvclRyYWNrQnk6IFRyYWNrQnlGdW5jdGlvbjxUPiB8IHVuZGVmaW5lZDtcbiAgICBuekxvYWRpbmdEZWxheTogbnVtYmVyO1xuICAgIG56TG9hZGluZ0luZGljYXRvcjogVGVtcGxhdGVSZWY8dm9pZD47XG4gICAgbnpUb3RhbDogbnVtYmVyO1xuICAgIG56VGl0bGU6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICAgIG56Rm9vdGVyOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgICBuek5vUmVzdWx0OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgICBueldpZHRoQ29uZmlnOiBzdHJpbmdbXTtcbiAgICBuelBhZ2VJbmRleDogbnVtYmVyO1xuICAgIG56UGFnZVNpemU6IG51bWJlcjtcbiAgICBuekRhdGE6IFRbXTtcbiAgICBuelBhZ2luYXRpb25Qb3NpdGlvbjogJ3RvcCcgfCAnYm90dG9tJyB8ICdib3RoJztcbiAgICBuelNjcm9sbDoge1xuICAgICAgICB4Pzogc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgeT86IHN0cmluZyB8IG51bGw7XG4gICAgfTtcbiAgICBuekl0ZW1SZW5kZXI6IFRlbXBsYXRlUmVmPFBhZ2luYXRpb25JdGVtUmVuZGVyQ29udGV4dD47XG4gICAgaXRlbVJlbmRlckNoaWxkOiBUZW1wbGF0ZVJlZjxQYWdpbmF0aW9uSXRlbVJlbmRlckNvbnRleHQ+O1xuICAgIHJlYWRvbmx5IGl0ZW1SZW5kZXI6IFRlbXBsYXRlUmVmPFBhZ2luYXRpb25JdGVtUmVuZGVyQ29udGV4dD47XG4gICAgbnpGcm9udFBhZ2luYXRpb246IGJvb2xlYW47XG4gICAgbnpUZW1wbGF0ZU1vZGU6IGJvb2xlYW47XG4gICAgbnpCb3JkZXJlZDogYm9vbGVhbjtcbiAgICBuelNob3dQYWdpbmF0aW9uOiBib29sZWFuO1xuICAgIG56TG9hZGluZzogYm9vbGVhbjtcbiAgICBuelNob3dTaXplQ2hhbmdlcjogYm9vbGVhbjtcbiAgICBuekhpZGVPblNpbmdsZVBhZ2U6IGJvb2xlYW47XG4gICAgbnpTaG93UXVpY2tKdW1wZXI6IGJvb2xlYW47XG4gICAgbnpTaW1wbGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgbnpQYWdlU2l6ZUNoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgcmVhZG9ubHkgbnpQYWdlSW5kZXhDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIHJlYWRvbmx5IG56Q3VycmVudFBhZ2VEYXRhQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55W10+O1xuICAgIHJlYWRvbmx5IHRhYmxlQm9keU5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIHJlYWRvbmx5IHRhYmxlSGVhZGVyTmF0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgcmVhZG9ubHkgY2RrVmlydHVhbFNjcm9sbE5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIHJlYWRvbmx5IG1peFRhYmxlQm9keU5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIGVtaXRQYWdlU2l6ZU9ySW5kZXgoc2l6ZTogbnVtYmVyLCBpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBzeW5jU2Nyb2xsVGFibGUoZTogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgc2V0U2Nyb2xsUG9zaXRpb25DbGFzc05hbWUoKTogdm9pZDtcbiAgICBzZXRTY3JvbGxOYW1lKHBvc2l0aW9uPzogc3RyaW5nKTogdm9pZDtcbiAgICBmaXRTY3JvbGxCYXIoKTogdm9pZDtcbiAgICB1cGRhdGVGcm9udFBhZ2luYXRpb25EYXRhSWZOZWVkZWQoaXNQYWdlU2l6ZU9yRGF0YUNoYW5nZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlLCByZW5kZXJlcjogUmVuZGVyZXIyLCBuZ1pvbmU6IE5nWm9uZSwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgaTE4bjogTnpJMThuU2VydmljZSwgcGxhdGZvcm06IFBsYXRmb3JtLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=